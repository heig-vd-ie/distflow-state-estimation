
# This is a basic workflow to help you get started with Actions

name: Build-sphinx-docs

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [] # [ main ]
  # pull_request:
  #   branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: $(pwd)/src # Define the environment variable here
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Set up SSH agent for private repo access
      # - name: Set up SSH
      #   uses: webfactory/ssh-agent@v0.5.3
      #   with:
      #     ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: Set up SSH for utility-functions repo
        run: |
          # Start the SSH agent
          eval "$(ssh-agent -s)"
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY_UTILIY_FUNCTIONS}}" > ~/.ssh/utility-functions
          chmod 600 ~/.ssh/utility-functions
          ssh-add ~/.ssh/utility-functions
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Set up SSH for data-schema repo
        run: |
          eval "$(ssh-agent -s)"
          echo "${{ secrets.SSH_PRIVATE_KEY_DATASCHEMA}}" > ~/.ssh/data-schema
          chmod 600 ~/.ssh/data-schema
          ssh-add ~/.ssh/data-schema
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          
      - name: Test SSH connection to GitHub
        run: |
          ssh -T git@github.com

      - name: Set up Python 3.12
        uses: actions/setup-python@v2
        with:
          python-version: "3.12"

      # WORKFLOW FOR SPHINX WITH PIP
      # - name: Install dependencies
      #   run: | 
      #     python -m pip install --upgrade pip
      #     pip install sphinx nbsphinx myst_parser sphinx-copybutton sphinx_rtd_theme sphinx_rtd_size ghp-import pyomo
      # - name: Build HTML
      #   run: | 
      #     cd docs/
      #     make html
      # - name: Run ghp-import
      #   run: | 
      #     ghp-import -n -p -f docs/_build/html

      # WORKFLOW FOR SPHINX WITH POETRY
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          export PATH="$HOME/.local/bin:$PATH"
          poetry --version
    
      - name: Install dependencies with Poetry
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          poetry install
      
      - name: Debug installed packages
        run: poetry run python -c "import networkx_function; print('networkx_function Imported Successfully')"
      # - name: Configure Poetry for SSH
      #   run: |
      #     export PATH="$HOME/.local/bin:$PATH"
      #     poetry config git-ssh-command "ssh -o StrictHostKeyChecking=no"
    
      - name: Build HTML
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          poetry run sphinx-build -b html docs/ docs/_build/html
      
      - name: Run ghp-import
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          poetry run ghp-import -n -p -f docs/_build/html


  
      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.